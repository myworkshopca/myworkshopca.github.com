(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{362:function(e){e.exports=JSON.parse('{"title":"Curses in Basic","subtitle":"Learning the basic concepts and knowledage of the Python Curses module","overview":"The curses library supplies a terminal-independent screen-painting and keyboard-handling facility for text-based terminals. Our text-based terminal game will built on top of curses library. This lesson will provide the basic concepts and knowlege for curses library.","comment-sections":"list of sections","sections":[{"title":"Overview","paragraphs":[{"content":"In this lesson, we will learn the fundermental concepts of Python curses library. At the end of the lesson, we will build the following games/programs:","content-list":["Greeting message at the center of the screen.","Keyboard decoding program.","Curses color palette.","The colorfull letter stars screensaver program."]}]},{"title":"Hello World and curses basic functions","paragraphs":[{"content":"We will start with a simple curses program: hello world. It will demonstrate the basic code structure of a curses program: <ul><li>Import curses module.</li> <li>Define the window function with stdscr parameter.</li> <li>Invoke <code>curses.wrapper</code> function to wrap up the window function.</li></ul> The following code except shows the basic structure of a curses program:","example":"hello.py"},{"content":"Here are a list of functions from curses library: <ul><li><code>stdscr.getmaxyx()</code>: return the size of the terminal screen, the height and width in <code>tuple</code> type.</li> <li><code>stdscr.addstr(str)</code>: paint the given string from the current cursor\'s coordinates.</li> <li><code>stdscr.addstr(y, x, str)</code>: paint the given string from the given coordinates.</li> <li><code>stdscr.getch()</code>: will put the program on pause and then wait for user to hit a key on keyboard. It returns an integer between 0 and 255, which represents the ASCII code of the key pressed.</li></ul>"}]},{"title":"Introduce the tuple type","paragraphs":[{"content":"Tuples are used to store multiple items in a single variable.<ul><li>A tuple is a collection which is ordered and unchangeable</li> <li>Tuples are written with round brackets</li></ul>","example":"tuple-sample.py"}]},{"title":"Curses coordinate system","paragraphs":[{"content":"Python curses library will turn the text-based terminal into a painting board. The rectangular coordinate system (y-axis, x-axis) is used to locate each unit / cell on the painting board (terminal). (0, 0) will be the top left corner of the terminal. Y axis will go bigger from top to bottom, X axis will go bigger from left to right. Text characters (ASCII or unicode) will be used to paint.<br/>The following image shows the location of the coordinates <code>(0, 5)</code>:","image":"curses-coordinate.png","slides":[{"image":"index.jpg","caption":""}]}]},{"title":"Paint message at the center of the screen","paragraphs":[{"content":"Using the coordinate system, we could paint message anywhere on the terminal screen. For example, we could paint a welcome message at the center of screen by following the steps:<ul><li>Call function <code>stdscr.getmaxyx()</code> to get the screen size, it will return a tuple.</li> <li>Calculate the starting coordinates, using the screen size and message length.</li> <li>Call function <code>stdscr.addstr(y, x, str)</code> to paint the message</li>"},{"content":"Here are the code excpet to paint message at the center:","example":"center.py"}]},{"title":"How to use color with curses","paragraphs":[{"content":"Curses library provides simple funtions to use colors in any curses program. However, we need initialize the color set before using them. The color set is a set of color pairs, foreground color and background color. An id will be assigned to each color pair. The id will be used to access a color pair."},{"content":"Here are the code excpet to initialize color pairs and use them:","example":"color.py"}]},{"title":"Curses timeout and no-delay mode","paragraphs":[{"content":"timeout and no delay mode"}]},{"title":"Resources","paragraphs":[{"content":"List of references: <ul><li>API reference page for curses library: <a href=\'https://docs.python.org/3/library/curses.html\'>https://docs.python.org/3/library/curses.html</a></li></ul>"}]}],"sections-draft":[{"title":"Summary"},{"title":"Paint message at the center"},{"title":"ASCII code and unicode characters"},{"title":"Challenge 1: Keyboard decoding game"},{"title":"How to use color with curses?"}]}')},363:function(e){e.exports=JSON.parse('{"title":"Curses Minesweeper","subtitle":"Build the classical Minesweeper Game by using the Python Curses module"}')},364:function(e){e.exports=JSON.parse('{"title":"Curses Snake Game","subtitle":"Build the simple Snake Game by using the Python Curses module","overview":"The Curses Snake Game will demonstrate the basic Python3 programming concepts and basic Python modules. Students will build the simple Snake game to understand basic data types, core data structures, while/for loop, if/else statement, and functions.","comment-sections":"list of sections","sections":[{"title":"Objective"},{"title":"Curses in basic","overview":"","subsections":[]},{"title":"Paint message at the center"},{"title":"ASCII code and unicode characters"},{"title":"Challenge 1: Keyboard decoding"},{"title":"How to use color with curses?"}]}')},365:function(e){e.exports=JSON.parse('{"title":"Curses Tetris Game","subtitle":"Build the classical Tetris Game by using the Python Curses module"}')},375:function(e,t,n){"use strict";n.r(t);n(22);var r={name:"SectionLessonDetailsMarkdown",methods:{mdhtml:function(e){var content=n(407)("./".concat(this.$route.query.name,"/").concat(e));return n(612)().render(content.default)}}},o=n(4),component=Object(o.a)(r,(function(){var e=this,t=e._self._c;return t("store-base-section",{attrs:{id:"lessondetailsmd"}},[t("div",{staticStyle:{padding:"0px 256px 0px 300px"},domProps:{innerHTML:e._s(e.mdhtml("index.md"))}})])}),[],!1,null,null,null);t.default=component.exports},387:function(e,t,n){"use strict";n.r(t);var r=n(353),o=n(354),l={layout:"store",name:"Lessons",auth:!1,head:{title:"Lessons"},extends:r.a,mixins:[Object(o.a)(["lessons-list"])],props:{id:{type:String,default:"setup"}}},c=n(4),component=Object(c.a)(l,undefined,undefined,!1,null,null,null);t.default=component.exports},389:function(e,t,n){var content=n(403);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,n(24).default)("e18bf392",content,!0,{sourceMap:!1})},394:function(e){e.exports=JSON.parse('[{"img":"curses-basic/index.gif","category":"Design","title":"Curses in Basic","router":"/lessons/details?name=curses-basic","html":"Basic knowledge about Python3 curses library, coordinate system, using color, and auto playing."},{"img":"curses-snake/index.gif","category":"Design","title":"Curses Snake Game","router":"/lessons/details?name=curses-snake","html":"Build the Snake Game by using Python3 curses module."},{"img":"curses-tetris/index.gif","category":"Design","title":"Curses Tetris Game","router":"/lessons/detailsmd?name=curses-tetris","html":"Build the classical Tetris Game by using Python3 curses module."}]')},396:function(e,t,n){"use strict";n.r(t);var r=n(353),o=n(354),l={layout:"store",name:"LessonDetail",auth:!1,head:{title:"Lesson Detail"},extends:r.a,mixins:[Object(o.a)(["lesson-details"])],props:{id:{type:String,default:"setup"}}},c=n(4),component=Object(c.a)(l,undefined,undefined,!1,null,null,null);t.default=component.exports},397:function(e,t,n){"use strict";n.r(t);var r=n(353),o=n(354),l={layout:"store",name:"LessonDetailMD",auth:!1,head:{title:"Lesson Detail Markdown"},extends:r.a,mixins:[Object(o.a)(["lesson-details-markdown"])],props:{id:{type:String,default:"setup"}}},c=(n(402),n(4)),component=Object(c.a)(l,undefined,undefined,!1,null,null,null);t.default=component.exports},402:function(e,t,n){"use strict";n(389)},403:function(e,t,n){var r=n(23)(!1);r.push([e.i,"h1{font-size:2em;text-align:center}code{display:block}table{width:100%;border:1px solid red}",""]),e.exports=r},407:function(e,t,n){var map={"./":387,"./curses-basic":362,"./curses-basic/":362,"./curses-basic/center.py":418,"./curses-basic/color.py":419,"./curses-basic/curses-coordinate.png":420,"./curses-basic/hello.py":421,"./curses-basic/index":362,"./curses-basic/index.gif":422,"./curses-basic/index.json":362,"./curses-basic/index.md":423,"./curses-basic/tuple-sample.py":424,"./curses-minesweeper":363,"./curses-minesweeper/":363,"./curses-minesweeper/index":363,"./curses-minesweeper/index.json":363,"./curses-minesweeper/index.png":425,"./curses-snake":364,"./curses-snake/":364,"./curses-snake/index":364,"./curses-snake/index.gif":426,"./curses-snake/index.json":364,"./curses-tetris":365,"./curses-tetris/":365,"./curses-tetris/index":365,"./curses-tetris/index.gif":427,"./curses-tetris/index.json":365,"./curses-tetris/index.md":428,"./details":396,"./details.vue":396,"./detailsmd":397,"./detailsmd.vue":397,"./index":387,"./index.md":429,"./index.vue":387,"./lessons":394,"./lessons.json":394,"./one.md":430};function r(e){var t=o(e);return n(t)}function o(e){if(!n.o(map,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return map[e]}r.keys=function(){return Object.keys(map)},r.resolve=o,e.exports=r,r.id=407},418:function(e,t,n){"use strict";n.r(t),t.default='# get the size (height and width) of a the terminal screen:\nheight, width = stdscr.getmaxyx()\n\n# define the message to paint.\nmsg = "Welcome to MyWorkshop coding club!"\n\n# do the calculation to find out the starting coordinates:\n# - the starting y axis will at the half of the screen height\ny = height // 2\n\n# - the starting x axis will need some calculation\nx = (width - len(msg)) // 2\n\n# paint the message at the specific coordinates.\nstdscr.addstr(y, x, msg)\n'},419:function(e,t,n){"use strict";n.r(t),t.default="# initialize the color pair\ncurses.start_color()\ncurses.use_default_colors()\n# the constant curses.COLORS will store the maxium color id.\nfor i in range(0, curses.COLORS):\n    # pair number, foreground color, background color\n    curses.init_pair(i + 1, i, bg_color)\n\n# use the color pair.\nstdscr.addstr(0, 0, 'Try colors', curses.color_pair(1))\n"},420:function(e,t,n){e.exports=n.p+"img/curses-coordinate.4255f83.png"},421:function(e,t,n){"use strict";n.r(t),t.default="# load the curses module.\nimport curses\n\ndef window(stdscr):\n    # addstr method will paint the message on terminal\n    stdscr.addstr('Hello World!')\n    # getch() will hold the window and wait for user's input\n    stdscr.getch()\n\n# invoke the wrapper function\ncurses.wrapper(window)\n"},422:function(e,t,n){e.exports=n.p+"img/index.a631c7b.gif"},423:function(e,t,n){"use strict";n.r(t),t.default='# Curses in Basic\n\nLearning the basic concepts and knowledage of the Python Curses module.\n\nThe curses library supplies a terminal-independent screen-painting and\nkeyboard-handling facility for text-based terminals.\nOur text-based terminal game will built on top of curses library.\nThis lesson will provide the basic concepts and knowlege for curses library.\n\n## Overview\n\nIn this lesson, we will learn the fundermental concepts of Python curses library.\nAt the end of the lesson, we will build the following games/programs:\n\n* Greeting message at the center of the screen\n* Keyboard decoding program\n* Curses color palette\n* The colorfull letter stars screensaver program\n\n## Hello World and curses basic functions\n\nWe will start with a simple curses program: hello world.\nIt will demonstrate the basic code structure of a curses program:\n\n* Import curses module\n* Define the window function with stdscr parameter\n* Invoke **curses.wrapper** function to wrap up the window function\n\nThe following code except shows the basic structure of a curses program\n\n```python\n# load the curses module.\nimport curses\n\ndef window(stdscr):\n    # addstr method will paint the message on terminal\n    stdscr.addstr(\'Hello World!\')\n    # getch() will hold the window and wait for user\'s input\n    stdscr.getch()\n\n# invoke the wrapper function\ncurses.wrapper(window)\n```\n\nHere are a list of functions from curses library:\n\n* **stdscr.getmaxyx()**: return the size of the terminal screen,\n  the height and width in **tuple** type.\n* **stdscr.addstr(str)**: paint the given string from the current cursor\'s coordinates.\n* **stdscr.addstr(y, x, str)**: paint the given string from the given coordinates.\n* **stdscr.getch()**: will put the program on pause and then wait for user to\n  hit a key on keyboard.\n  It returns an integer between 0 and 255,\n  which represents the ASCII code of the key pressed.\n\n## Introduce the tuple type\n\nTuples are used to store multiple items in a single variable.\n* A tuple is a collection which is ordered and unchangeable\n* Tuples are written with round brackets\n\n```python\n# define a tuple, using round brackets\nfruit = ("banana", "apple", "orange")\n\n# access a tuple using index id.\nprint( fruit[1] )\n# apple\n\n# unpacking a tuple:\n# Items in a tuple are order. So the sequence is sensitive.\n(banana, apple, orange) = fruit\n# the round brackets are not mandatory,\n# the following will do the same.\nbanana, apple, orange = fruit\n\nprint(banana)\n# banana\n```\n'},424:function(e,t,n){"use strict";n.r(t),t.default='# define a tuple, using round brackets\nfruit = ("banana", "apple", "orange")\n\n# access a tuple using index id.\nprint( fruit[1] )\n# apple\n\n# unpacking a tuple:\n# Items in a tuple are order. So the sequence is sensitive.\n(banana, apple, orange) = fruit\n# the round brackets are not mandatory,\n# the following will do the same.\nbanana, apple, orange = fruit\n\nprint(banana)\n# banana\n'},425:function(e,t,n){e.exports=n.p+"img/index.0c8be66.png"},426:function(e,t,n){e.exports=n.p+"img/index.8b95482.gif"},427:function(e,t,n){e.exports=n.p+"img/index.275e15a.gif"},428:function(e,t,n){"use strict";n.r(t),t.default="# Curses Tetris Game\n\nBuild the classical Tetris Game by using the Python Curses module\n\nList of content:\n\n- one\n- two\n- three\n\nTesting href link\n\n- [Google Homepage](http://google.com)\n\n## Some soure code examples\n\nBash script\n\n```bash\n// some bash script\nls -la ~/\n```\n\nJavaScript sample code\n\n```js\nvar hljs = require('highlight.js'); // https://highlightjs.org\n\n// Actual default values\nvar md = require('markdown-it')({\n  highlight: function (str, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return '<pre class=\"hljs\"><code>' +\n               hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\n               '</code></pre>';\n      } catch (__) {}\n    }\n\n    return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n  }\n});\n```\n\n## Test table\n\n| Option | Description |\n| ------ | ----------- |\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\n### Right aligned columns\n\n| Option | Description |\n| ------:| ----------- |\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n"},429:function(e,t,n){"use strict";n.r(t),t.default='# index\n\nthe index.md\n\n```bash\nls -la\n\n# a simple py script\necho "a = 1\nprint(a)" > /tmp/test.py\n\ncat /tmp/test.py\ncd /tmp; python3 test.py\n```\n'},430:function(e,t,n){"use strict";n.r(t),t.default="# One\n\nthe first test\n"}}]);